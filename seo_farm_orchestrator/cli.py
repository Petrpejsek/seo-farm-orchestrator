#!/usr/bin/env python3
"""
SEO Farm Orchestrator CLI

Usage:
  seo-farm run --topic "Your topic"
  seo-farm run --csv input/topics.csv  
  seo-farm worker
  seo-farm --help
"""

import asyncio
import sys
import os
import argparse
from pathlib import Path

# Nastavenie cesty k current working directory pre importy
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Kontrola ƒçi sme v spr√°vnom adres√°ri
if not (project_root / "activities").exists():
    print("‚ùå SEO Farm Orchestrator mus√≠ by≈• spusten√Ω z project root adres√°ra")
    print(f"   Aktu√°lny adres√°r: {os.getcwd()}")
    print(f"   Project root: {project_root}")
    print("   Pou≈æite: cd /path/to/seo-farm-orchestrator")
    sys.exit(1)

try:
    from scripts.test_cli import process_single_topic, process_csv_topics
    from worker import main as worker_main
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("   Uistite sa, ≈æe ste v spr√°vnom adres√°ri a v≈°etky dependencies s√∫ nain≈°talovan√©")
    print("   Spustite: pip install -r requirements.txt")
    sys.exit(1)

def run_command(args):
    """Spust√≠ SEO pipeline"""
    if args.csv:
        print(f"üöÄ Sp√∫≈°≈•am bulk processing z CSV: {args.csv}")
        asyncio.run(process_csv_topics(args.csv))
    elif args.topic:
        print(f"üöÄ Spracov√°vam jedno t√©ma: {args.topic}")
        asyncio.run(process_single_topic(args.topic))
    else:
        print("‚ùå Mus√≠te zada≈• buƒè --topic alebo --csv")
        sys.exit(1)

def worker_command(args):
    """Spust√≠ Temporal worker"""
    print("üîÑ Sp√∫≈°≈•am Temporal worker...")
    asyncio.run(worker_main())

def main():
    """Hlavn√° CLI funkcia"""
    
    parser = argparse.ArgumentParser(
        prog="seo-farm",
        description="üéØ SEO Farm Orchestrator - AI-powered SEO content generation",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Pr√≠klady pou≈æitia:
  seo-farm run --topic "AI n√°stroje pre marketing"
  seo-farm run --csv input/topics.csv
  seo-farm worker

Environment premenn√©:
  OPENAI_API_KEY      - OpenAI API kƒæ√∫ƒç (povinn√©)
  OPENAI_ASSISTANT_ID - OpenAI Assistant ID (povinn√©)
  SAVE_TO_DB          - Ukladanie do datab√°zy (voliteƒæn√©, default: false)
  DATABASE_URL        - PostgreSQL connection string (voliteƒæn√©)
        """
    )
    
    subparsers = parser.add_subparsers(dest="command", help="Dostupn√© pr√≠kazy")
    
    # Run subcommand
    run_parser = subparsers.add_parser("run", help="Spust√≠ SEO content generation")
    run_group = run_parser.add_mutually_exclusive_group(required=True)
    run_group.add_argument("--topic", "-t", type=str, help="Jednotliv√© t√©ma pre spracovanie")
    run_group.add_argument("--csv", "-c", type=str, help="CSV s√∫bor s t√©mami")
    
    # Worker subcommand  
    worker_parser = subparsers.add_parser("worker", help="Spust√≠ Temporal worker")
    
    # Version subcommand
    version_parser = subparsers.add_parser("version", help="Zobraz√≠ verziu")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    if args.command == "run":
        run_command(args)
    elif args.command == "worker":
        worker_command(args)
    elif args.command == "version":
        from . import __version__
        print(f"SEO Farm Orchestrator v{__version__}")
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 