#!/bin/bash

# üõ°Ô∏è MASTER TEMPORAL WORKER MANAGER - PRODUCTION VERSION
# =====================================================
# Production-ready verze s kompletn√≠ konfigurac√≠ pro deploy
# - Environment detection (dev/staging/production)
# - Cross-platform kompatibilita (Linux/macOS)
# - Secure lock file location
# - Production URLs a cesty
# - Enhanced logging and monitoring
# 
# POU≈ΩIT√ç: ./master_worker_manager_production.sh [start|stop|restart|status|health]

set -euo pipefail

# üåç ENVIRONMENT DETECTION
ENVIRONMENT="${ENVIRONMENT:-development}"
HOSTNAME="${HOSTNAME:-$(hostname)}"

# üîß PRODUCTION/ENVIRONMENT KONFIGURACE
case "$ENVIRONMENT" in
    "production")
        WORKER_SCRIPT="${WORKER_SCRIPT:-/opt/seo-farm/production_worker.py}"
        PID_FILE="${PID_FILE:-/var/run/seo-farm/worker.pid}"
        LOCK_FILE="${LOCK_FILE:-/var/lock/seo-farm/temporal_worker.lock}"
        LOG_FILE="${LOG_FILE:-/var/log/seo-farm/worker.log}"
        API_BASE_URL="${API_BASE_URL:-https://api.yourdomain.com}"
        WORKER_USER="${WORKER_USER:-seouser}"
        ;;
    "staging")
        WORKER_SCRIPT="${WORKER_SCRIPT:-/opt/seo-farm-staging/production_worker.py}"
        PID_FILE="${PID_FILE:-/tmp/seo-farm-staging/worker.pid}"
        LOCK_FILE="${LOCK_FILE:-/tmp/seo-farm-staging/temporal_worker.lock}"
        LOG_FILE="${LOG_FILE:-/tmp/seo-farm-staging/worker.log}"
        API_BASE_URL="${API_BASE_URL:-https://staging-api.yourdomain.com}"
        WORKER_USER="${WORKER_USER:-$(whoami)}"
        ;;
    *)  # development
        WORKER_SCRIPT="${WORKER_SCRIPT:-./production_worker.py}"
        PID_FILE="${PID_FILE:-./worker.pid}"
        LOCK_FILE="${LOCK_FILE:-/tmp/temporal_worker_dev.lock}"
        LOG_FILE="${LOG_FILE:-./worker.log}"
        API_BASE_URL="${API_BASE_URL:-http://localhost:8000}"
        WORKER_USER="${WORKER_USER:-$(whoami)}"
        ;;
esac

# üîß DAL≈†√ç KONFIGURACE
HEALTH_CHECK_INTERVAL="${HEALTH_CHECK_INTERVAL:-30}"  # sekund
PYTHON_EXECUTABLE="${PYTHON_EXECUTABLE:-python3}"
MAX_STARTUP_WAIT="${MAX_STARTUP_WAIT:-60}"  # sekund
GRACEFUL_SHUTDOWN_TIMEOUT="${GRACEFUL_SHUTDOWN_TIMEOUT:-30}"

# üñ•Ô∏è PLATFORM DETECTION
PLATFORM="$(uname -s)"
case "$PLATFORM" in
    "Darwin")  # macOS
        PS_COMMAND_FIELD="command"
        ;;
    "Linux")   # Linux
        PS_COMMAND_FIELD="comm"
        ;;
    *)
        echo "‚ö†Ô∏è  Nezn√°m√° platforma: $PLATFORM, pou≈æ√≠v√°m Linux defaults"
        PS_COMMAND_FIELD="comm"
        ;;
esac

# üé® BARVY PRO V√ùSTUP
if [[ -t 1 ]]; then  # Pouze pokud je terminal
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'
else
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

# üìù LOGGING FUNKCE
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] [$$] [$ENVIRONMENT]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] [$$] [$ENVIRONMENT] ‚úÖ $1${NC}" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] [$$] [$ENVIRONMENT] ‚ö†Ô∏è  $1${NC}" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] [$$] [$ENVIRONMENT] ‚ùå $1${NC}" | tee -a "$LOG_FILE"
}

# üìÅ ADRES√Å≈ò A PERMISSIONS SETUP
setup_directories() {
    log "Nastavuji adres√°≈ôovou strukturu..."
    
    # Vytvo≈ô parent adres√°≈ôe pokud neexistuj√≠
    mkdir -p "$(dirname "$PID_FILE")" 2>/dev/null || true
    mkdir -p "$(dirname "$LOCK_FILE")" 2>/dev/null || true
    mkdir -p "$(dirname "$LOG_FILE")" 2>/dev/null || true
    
    # Nastav permissions pokud je to production
    if [[ "$ENVIRONMENT" == "production" ]]; then
        # V produkci mus√≠ m√≠t spr√°vn√© permissions
        if [[ "$(whoami)" == "root" ]]; then
            chown -R "$WORKER_USER:$WORKER_USER" "$(dirname "$PID_FILE")" 2>/dev/null || true
            chown -R "$WORKER_USER:$WORKER_USER" "$(dirname "$LOG_FILE")" 2>/dev/null || true
            chmod 755 "$(dirname "$PID_FILE")" 2>/dev/null || true
            chmod 755 "$(dirname "$LOG_FILE")" 2>/dev/null || true
        fi
    fi
}

# üîê ATOMICK√ù LOCK (cross-platform, production-safe)
acquire_lock() {
    log "Z√≠sk√°v√°m atomick√Ω lock..."
    
    local lock_dir="${LOCK_FILE}.d"
    local max_wait=30
    local waited=0
    
    # Ujisti se, ≈æe lock directory parent existuje
    mkdir -p "$(dirname "$lock_dir")" 2>/dev/null || true
    
    while ! mkdir "$lock_dir" 2>/dev/null; do
        if [[ $waited -ge $max_wait ]]; then
            log_error "Worker u≈æ bƒõ≈æ√≠ nebo je uzamƒçen! (lock dir: $lock_dir)"
            log_error "Pokud jste si jisti, ≈æe worker nebƒõ≈æ√≠, sma≈æte: $lock_dir"
            
            # V production uka≈æme dodateƒçn√© info pro debugging
            if [[ "$ENVIRONMENT" == "production" ]]; then
                if [[ -d "$lock_dir" ]]; then
                    log_error "Lock info:"
                    ls -la "$lock_dir" 2>/dev/null || true
                    cat "$lock_dir/manager_pid" 2>/dev/null && echo || true
                    cat "$lock_dir/locked_at" 2>/dev/null && echo || true
                fi
            fi
            
            exit 1
        fi
        log "ƒåek√°m na uvolnƒõn√≠ lock... ($waited/$max_wait s)"
        sleep 1
        ((waited++))
    done
    
    # Ulo≈æ√≠me info do lock directory
    echo $$ > "$lock_dir/manager_pid" 2>/dev/null || true
    echo "$(date)" > "$lock_dir/locked_at" 2>/dev/null || true
    echo "$ENVIRONMENT" > "$lock_dir/environment" 2>/dev/null || true
    echo "$HOSTNAME" > "$lock_dir/hostname" 2>/dev/null || true
    
    log_success "Lock z√≠sk√°n √∫spƒõ≈°nƒõ"
}

release_lock() {
    local lock_dir="${LOCK_FILE}.d"
    if [[ -d "$lock_dir" ]]; then
        rm -rf "$lock_dir" 2>/dev/null || true
        log "Lock uvolnƒõn"
    fi
}

# üîç PID FILE OCHRANA (cross-platform)
validate_pid_file() {
    if [[ ! -f "$PID_FILE" ]]; then
        return 1  # PID file neexistuje
    fi
    
    local pid=$(cat "$PID_FILE" 2>/dev/null || echo "")
    if [[ -z "$pid" ]]; then
        log_warning "PID file je pr√°zdn√Ω, odstra≈àuji..."
        rm -f "$PID_FILE" 2>/dev/null || true
        return 1
    fi
    
    # Cross-platform check existence procesu
    if ! kill -0 "$pid" 2>/dev/null; then
        log_warning "Proces s PID $pid u≈æ neexistuje, odstra≈àuji star√Ω PID file..."
        rm -f "$PID_FILE" 2>/dev/null || true
        return 1
    fi
    
    # Ovƒõ≈ô, zda to je opravdu n√°≈° worker (cross-platform)
    local process_command=""
    case "$PLATFORM" in
        "Darwin")  # macOS
            process_command=$(ps -p "$pid" -o command= 2>/dev/null | head -1 || echo "")
            ;;
        "Linux")   # Linux  
            process_command=$(ps -p "$pid" -o comm= 2>/dev/null | head -1 || echo "")
            # Fallback na args pokud comm nen√≠ dostateƒçn√Ω
            if [[ ! "$process_command" =~ python|worker ]]; then
                process_command=$(ps -p "$pid" -o args= 2>/dev/null | head -1 || echo "")
            fi
            ;;
    esac
    
    if [[ ! "$process_command" =~ production_worker|python.*worker ]]; then
        log_warning "Proces s PID $pid nen√≠ n√°≈° worker, odstra≈àuji PID file..."
        log_warning "Process command: $process_command"
        rm -f "$PID_FILE" 2>/dev/null || true
        return 1
    fi
    
    echo "$pid"
    return 0
}

# üîç KONTROLA Bƒö≈Ω√çC√çCH WORKER≈Æ (cross-platform)
check_running_workers() {
    local count=0
    case "$PLATFORM" in
        "Darwin")  # macOS
            count=$(ps aux | grep -E "(production_worker\.py|python.*production_worker)" | grep -v grep | wc -l | tr -d ' ')
            ;;
        "Linux")   # Linux
            count=$(pgrep -f "production_worker" | wc -l | tr -d ' ')
            ;;
    esac
    echo "$count"
}

get_worker_pids() {
    case "$PLATFORM" in
        "Darwin")  # macOS
            ps aux | grep -E "(production_worker\.py|python.*production_worker)" | grep -v grep | awk '{print $2}' | tr '\n' ' '
            ;;
        "Linux")   # Linux
            pgrep -f "production_worker" | tr '\n' ' '
            ;;
    esac
}

# üè• ENHANCED HEALTH CHECK
health_check() {
    log "Prov√°d√≠m health check..."
    
    # 1. Ovƒõ≈ô ≈æe worker proces bƒõ≈æ√≠
    local worker_count=$(check_running_workers)
    if [[ "$worker_count" -eq 0 ]]; then
        log_error "Health check selhal: ≈Ω√°dn√Ω worker proces nebƒõ≈æ√≠"
        return 1
    fi
    
    if [[ "$worker_count" -gt 1 ]]; then
        log_error "Health check selhal: Bƒõ≈æ√≠ v√≠ce worker≈Ø ($worker_count) - to je probl√©m!"
        log_error "Bƒõ≈æ√≠c√≠ procesy: $(get_worker_pids)"
        return 1
    fi
    
    # 2. Ovƒõ≈ô PID file
    local pid=$(validate_pid_file)
    if [[ $? -ne 0 ]]; then
        log_error "Health check selhal: Probl√©m s PID file"
        return 1
    fi
    
    # 3. Ovƒõ≈ô API endpoint (jen pokud je curl dostupn√Ω)
    if command -v curl >/dev/null 2>&1; then
        local health_url="$API_BASE_URL/health"
        if curl -s --max-time 5 "$health_url" >/dev/null 2>&1; then
            log_success "API endpoint je dostupn√Ω ($health_url)"
        else
            log_warning "API endpoint nedostupn√Ω: $health_url"
            # V produkci to m≈Ø≈æe b√Ωt probl√©m
            if [[ "$ENVIRONMENT" == "production" ]]; then
                log_error "V produkci mus√≠ b√Ωt API dostupn√©!"
                return 1
            fi
        fi
    else
        log_warning "curl nen√≠ k dispozici, p≈ôeskakuji API health check"
    fi
    
    # 4. Ovƒõ≈ô log file (pokud existuje)
    if [[ -f "$LOG_FILE" ]]; then
        local log_size=$(du -h "$LOG_FILE" 2>/dev/null | cut -f1 || echo "0")
        log "Log file size: $log_size"
        
        # Zkontroluj posledn√≠ aktivitu
        local last_log_line=$(tail -1 "$LOG_FILE" 2>/dev/null || echo "")
        if [[ -n "$last_log_line" ]]; then
            log "Posledn√≠ log: $(echo "$last_log_line" | head -c 100)..."
        fi
    fi
    
    log_success "Health check √∫spƒõ≈°n√Ω - worker bƒõ≈æ√≠ spr√°vnƒõ (PID: $pid)"
    return 0
}

# üöÄ ENHANCED WORKER START
start_worker() {
    log "=== SPOU≈†T√çM TEMPORAL WORKER ==="
    log "Environment: $ENVIRONMENT"
    log "Platform: $PLATFORM"
    log "Hostname: $HOSTNAME"
    
    # Setup adres√°≈ô≈Ø
    setup_directories
    
    # Z√≠skej atomick√Ω lock
    acquire_lock
    
    # Ovƒõ≈ô, ≈æe ≈æ√°dn√Ω worker nebƒõ≈æ√≠
    local worker_count=$(check_running_workers)
    if [[ "$worker_count" -gt 0 ]]; then
        log_error "Worker u≈æ bƒõ≈æ√≠! Nalezeno $worker_count proces≈Ø:"
        log_error "$(get_worker_pids)"
        log_error "Pou≈æijte 'restart' m√≠sto 'start' nebo nejd≈ô√≠ve zastavte worker"
        release_lock
        exit 1
    fi
    
    # Ovƒõ≈ô PID file
    if validate_pid_file >/dev/null 2>&1; then
        log_error "PID file existuje, ale worker nebƒõ≈æ√≠ - pravdƒõpodobnƒõ dirty shutdown"
        rm -f "$PID_FILE"
    fi
    
    # Ovƒõ≈ô prost≈ôed√≠
    if [[ -z "$API_BASE_URL" ]]; then
        log_error "API_BASE_URL nen√≠ nastavena!"
        release_lock
        exit 1
    fi
    
    if [[ ! -f "$WORKER_SCRIPT" ]]; then
        log_error "Worker script '$WORKER_SCRIPT' neexistuje!"
        release_lock
        exit 1
    fi
    
    # V produkci ovƒõ≈ô permissions
    if [[ "$ENVIRONMENT" == "production" ]]; then
        if [[ ! -x "$WORKER_SCRIPT" ]]; then
            log_error "Worker script nen√≠ spustiteln√Ω!"
            release_lock
            exit 1
        fi
    fi
    
    log "API_BASE_URL: $API_BASE_URL"
    log "Worker script: $WORKER_SCRIPT"
    log "Python executable: $PYTHON_EXECUTABLE"
    
    # Spu≈°tƒõn√≠ workera na pozad√≠
    log "Spou≈°t√≠m worker proces..."
    
    # V produkci m≈Ø≈æeme cht√≠t zmƒõnit u≈æivatele
    local start_command=""
    if [[ "$ENVIRONMENT" == "production" && "$(whoami)" == "root" && "$WORKER_USER" != "root" ]]; then
        start_command="su - $WORKER_USER -c 'cd $(dirname "$WORKER_SCRIPT") && API_BASE_URL=\"$API_BASE_URL\" nohup $PYTHON_EXECUTABLE \"$WORKER_SCRIPT\" >> \"$LOG_FILE\" 2>&1 &'"
        eval "$start_command"
        sleep 2
        # Z√≠skej PID jinak p≈ôi su
        local worker_pid=$(get_worker_pids | awk '{print $1}')
    else
        cd "$(dirname "$WORKER_SCRIPT")"
        API_BASE_URL="$API_BASE_URL" nohup "$PYTHON_EXECUTABLE" "$WORKER_SCRIPT" >> "$LOG_FILE" 2>&1 &
        local worker_pid=$!
    fi
    
    if [[ -z "$worker_pid" ]]; then
        log_error "Nepoda≈ôilo se z√≠skat PID worker procesu!"
        release_lock
        exit 1
    fi
    
    # Ulo≈æ PID
    echo "$worker_pid" > "$PID_FILE"
    log "PID $worker_pid ulo≈æen do $PID_FILE"
    
    # Poƒçkej na startup a ovƒõ≈ô
    log "ƒåek√°m na worker startup (max ${MAX_STARTUP_WAIT}s)..."
    local waited=0
    while [[ $waited -lt $MAX_STARTUP_WAIT ]]; do
        if kill -0 "$worker_pid" 2>/dev/null; then
            break
        fi
        sleep 1
        ((waited++))
    done
    
    if ! kill -0 "$worker_pid" 2>/dev/null; then
        log_error "Worker se nepoda≈ôilo spustit!"
        rm -f "$PID_FILE"
        release_lock
        exit 1
    fi
    
    # Health check
    sleep 2
    if health_check; then
        log_success "Worker spu≈°tƒõn √∫spƒõ≈°nƒõ!"
        log_success "PID: $worker_pid"
        log_success "Environment: $ENVIRONMENT"
        log_success "Log file: $LOG_FILE"
        log_success "Pro monitoring: tail -f $LOG_FILE"
    else
        log_error "Worker se spustil, ale health check selhal"
        stop_worker
        release_lock
        exit 1
    fi
    
    log_success "=== WORKER √öSPƒö≈†Nƒö SPU≈†TƒöN ==="
}

# üõë ENHANCED WORKER STOP
stop_worker() {
    log "=== ZASTAVUJI TEMPORAL WORKER ==="
    
    # Najdi v≈°echny worker procesy
    local worker_pids=$(get_worker_pids)
    
    if [[ -z "$worker_pids" ]]; then
        log_warning "≈Ω√°dn√© worker procesy nenalezeny"
    else
        log "Ukonƒçuji procesy: $worker_pids"
        
        # Graceful shutdown (SIGTERM)
        for pid in $worker_pids; do
            if kill -0 "$pid" 2>/dev/null; then
                log "Pos√≠l√°m SIGTERM procesu $pid"
                kill -TERM "$pid" 2>/dev/null || true
            fi
        done
        
        # Poƒçkej na graceful shutdown
        local waited=0
        while [[ $waited -lt $GRACEFUL_SHUTDOWN_TIMEOUT ]]; do
            local remaining=$(check_running_workers)
            if [[ "$remaining" -eq 0 ]]; then
                break
            fi
            sleep 1
            ((waited++))
        done
        
        # Ovƒõ≈ô, ≈æe jsou ukonƒçeny
        local remaining=$(check_running_workers)
        if [[ "$remaining" -gt 0 ]]; then
            log_warning "Nƒõkter√© procesy st√°le bƒõ≈æ√≠ po ${GRACEFUL_SHUTDOWN_TIMEOUT}s, pou≈æ√≠v√°m SIGKILL..."
            for pid in $worker_pids; do
                if kill -0 "$pid" 2>/dev/null; then
                    log "Pos√≠l√°m SIGKILL procesu $pid"
                    kill -9 "$pid" 2>/dev/null || true
                fi
            done
            sleep 2
        fi
        
        # Fin√°ln√≠ ovƒõ≈ôen√≠
        local final_count=$(check_running_workers)
        if [[ "$final_count" -gt 0 ]]; then
            log_error "KRITICK√â: Nƒõkte≈ô√≠ workeri st√°le bƒõ≈æ√≠!"
            case "$PLATFORM" in
                "Darwin")
                    ps aux | grep -E "(production_worker\.py|python.*production_worker)" | grep -v grep
                    ;;
                "Linux")
                    ps aux | grep production_worker | grep -v grep
                    ;;
            esac
            exit 1
        fi
        
        log_success "V≈°echny worker procesy ukonƒçeny"
    fi
    
    # Vyƒçisti PID file
    if [[ -f "$PID_FILE" ]]; then
        rm -f "$PID_FILE"
        log "PID file smaz√°n"
    fi
    
    # Uvolni lock
    release_lock
    
    log_success "=== WORKER √öSPƒö≈†Nƒö ZASTAVEN ==="
}

# üîÑ RESTART
restart_worker() {
    log "=== RESTART WORKERA ==="
    stop_worker
    sleep 2
    start_worker
}

# üìä ENHANCED STATUS
show_status() {
    echo ""
    log "=== STATUS TEMPORAL WORKERA ==="
    echo ""
    
    local worker_count=$(check_running_workers)
    local lock_status="üîì UNLOCKED"
    local pid_status="üìÅ ≈Ω√°dn√Ω PID file"
    
    # Konfigurace info
    echo "üåç Environment: $ENVIRONMENT"
    echo "üñ•Ô∏è  Platform: $PLATFORM"
    echo "üè† Hostname: $HOSTNAME"
    echo "üë§ Worker user: $WORKER_USER"
    echo ""
    
    # Cesty
    echo "üîß Worker script: $WORKER_SCRIPT"
    echo "üìÅ PID file: $PID_FILE"
    echo "üìã Log file: $LOG_FILE"
    echo "üåê API URL: $API_BASE_URL"
    echo ""
    
    # Kontrola lock file
    local lock_dir="${LOCK_FILE}.d"
    if [[ -d "$lock_dir" ]]; then
        lock_status="üîí LOCKED"
        if [[ -f "$lock_dir/manager_pid" ]]; then
            local lock_pid=$(cat "$lock_dir/manager_pid" 2>/dev/null || echo "N/A")
            lock_status="$lock_status (PID: $lock_pid)"
        fi
    fi
    
    # Kontrola PID file
    if [[ -f "$PID_FILE" ]]; then
        local pid=$(cat "$PID_FILE" 2>/dev/null || echo "neplatn√Ω")
        if validate_pid_file >/dev/null 2>&1; then
            pid_status="üìÅ PID: $pid (aktivn√≠)"
        else
            pid_status="üìÅ PID: $pid (mrtv√Ω)"
        fi
    fi
    
    echo "üîê Lock status: $lock_status"
    echo "$pid_status"
    echo "üìä Bƒõ≈æ√≠c√≠ procesy: $worker_count"
    echo ""
    
    if [[ "$worker_count" -eq 0 ]]; then
        log_success "≈Ω√°dn√© worker procesy - syst√©m je ƒçist√Ω"
    elif [[ "$worker_count" -eq 1 ]]; then
        log_success "Spr√°vnƒõ - bƒõ≈æ√≠ POUZE JEDEN worker:"
        case "$PLATFORM" in
            "Darwin")
                ps aux | grep -E "(production_worker\.py|python.*production_worker)" | grep -v grep
                ;;
            "Linux")
                ps aux | grep production_worker | grep -v grep || pgrep -fl production_worker
                ;;
        esac
        echo ""
        health_check
    else
        log_error "PROBL√âM - bƒõ≈æ√≠ v√≠ce worker≈Ø ($worker_count):"
        case "$PLATFORM" in
            "Darwin")
                ps aux | grep -E "(production_worker\.py|python.*production_worker)" | grep -v grep
                ;;
            "Linux")
                ps aux | grep production_worker | grep -v grep || pgrep -fl production_worker
                ;;
        esac
        echo ""
        log_error "DOPORUƒåEN√ç: Spus≈• '$0 restart'"
    fi
    
    echo ""
}

# üîÅ KONTINU√ÅLN√ç HEALTH CHECK
continuous_health_check() {
    log "Spou≈°t√≠m kontinu√°ln√≠ health check (interval: ${HEALTH_CHECK_INTERVAL}s)"
    log "Pro ukonƒçen√≠ stisknƒõte Ctrl+C"
    
    while true; do
        if ! health_check; then
            log_error "Health check selhal - ukonƒçuji monitoring"
            exit 1
        fi
        sleep "$HEALTH_CHECK_INTERVAL"
    done
}

# üö® CLEANUP funkce p≈ôi ukonƒçen√≠
cleanup() {
    log "Prov√°d√≠m cleanup p≈ôi ukonƒçen√≠..."
    release_lock
}

# Nastaven√≠ trap pro cleanup
trap cleanup EXIT INT TERM

# üìã SHOW ENVIRONMENT INFO
show_environment_info() {
    echo ""
    echo "üåç ENVIRONMENT CONFIGURATION"
    echo "============================"
    echo "Environment: $ENVIRONMENT"
    echo "Platform: $PLATFORM"
    echo "Hostname: $HOSTNAME"
    echo "Current user: $(whoami)"
    echo "Worker user: $WORKER_USER"
    echo ""
    echo "üìÅ PATHS:"
    echo "Worker script: $WORKER_SCRIPT"
    echo "PID file: $PID_FILE"
    echo "Lock file: $LOCK_FILE"
    echo "Log file: $LOG_FILE"
    echo ""
    echo "üåê NETWORK:"
    echo "API Base URL: $API_BASE_URL"
    echo ""
    echo "üîß CONFIGURATION:"
    echo "Python: $PYTHON_EXECUTABLE"
    echo "Health check interval: ${HEALTH_CHECK_INTERVAL}s"
    echo "Max startup wait: ${MAX_STARTUP_WAIT}s"
    echo "Graceful shutdown timeout: ${GRACEFUL_SHUTDOWN_TIMEOUT}s"
    echo ""
}

# üéØ MAIN LOGIC
case "${1:-status}" in
    "start")
        start_worker
        ;;
    "stop")
        stop_worker
        ;;
    "restart")
        restart_worker
        ;;
    "status")
        show_status
        ;;
    "health")
        health_check
        ;;
    "monitor")
        continuous_health_check
        ;;
    "env"|"environment")
        show_environment_info
        ;;
    *)
        echo ""
        echo "üõ°Ô∏è MASTER TEMPORAL WORKER MANAGER - PRODUCTION READY"
        echo "===================================================="
        echo ""
        echo "Pou≈æit√≠: $0 [start|stop|restart|status|health|monitor|env]"
        echo ""
        echo "start      - Spust√≠ POUZE JEDEN worker (sel≈æe pokud u≈æ bƒõ≈æ√≠)"
        echo "stop       - Gracefully zastav√≠ v≈°echny worker procesy"  
        echo "restart    - Zastav√≠ v≈°echny a spust√≠ JEDEN worker (BEZPEƒåN√â)"
        echo "status     - Zobraz√≠ detailn√≠ stav worker proces≈Ø"
        echo "health     - Provede health check"
        echo "monitor    - Kontinu√°ln√≠ health check monitoring"
        echo "env        - Zobraz√≠ environment konfiguraci"
        echo ""
        echo "üåç ENVIRONMENT VARIABLES:"
        echo "ENVIRONMENT=development|staging|production"
        echo "API_BASE_URL=<api_url>"
        echo "WORKER_SCRIPT=<path_to_script>"
        echo "PYTHON_EXECUTABLE=<python_path>"
        echo ""
        echo "üîí Cross-platform atomick√Ω lock (Linux/macOS)"
        echo "üìÅ Production-safe file locations"
        echo "üè• Enhanced health checking"
        echo ""
        echo "üö® V≈ΩDY pou≈æ√≠vej tento script m√≠sto manu√°ln√≠ho spou≈°tƒõn√≠!"
        echo ""
        ;;
esac