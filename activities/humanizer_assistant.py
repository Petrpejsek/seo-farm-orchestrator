"""
HumanizerAssistant - Humanization krok v SEO pipeline
Humanizuje AI-generovan√Ω content pro p≈ôirozenƒõj≈°√≠ ƒçten√≠.
"""

import json
import logging
import os
from typing import Optional, Dict, Any
from openai import OpenAI
from datetime import datetime

logger = logging.getLogger(__name__)

async def humanizer_assistant(content: str, assistant_id: Optional[str] = None) -> Dict[str, Any]:
    """
    Humanizuje AI-generovan√Ω content pro p≈ôirozenƒõj≈°√≠ ƒçten√≠.
    
    Args:
        content (str): AI-generovan√Ω obsah k humanizaci
        assistant_id (str, optional): ID asistenta pro naƒçten√≠ parametr≈Ø z DB
        
    Returns:
        Dict[str, Any]: Dictionary s output kl√≠ƒçem obsahuj√≠c√≠m humanizovan√Ω content
    """
    
    logger.info(f"üë§ HumanizerAssistant humanizuje content: {len(content)} znak≈Ø")
    
    # V√Ωchoz√≠ parametry
    default_params = {
        "model": "gpt-4o",
        "temperature": 0.7,
        "top_p": 0.9,
        "max_tokens": 2000,
        "system_prompt": "Jsi expert na humanizaci AI-generovan√©ho obsahu. Tv√Ωm √∫kolem je udƒõlat text p≈ôirozenƒõj≈°√≠, ƒçitelnƒõj≈°√≠ a v√≠ce lidsk√Ω, zachovat informaƒçn√≠ hodnotu a zlep≈°it flow textu."
    }
    
    # Prompt pro humanizaci
    humanization_prompt = f"""
Humanizuj n√°sleduj√≠c√≠ AI-generovan√Ω obsah. Udƒõlej ho p≈ôirozenƒõj≈°√≠, ƒçitelnƒõj≈°√≠ a v√≠ce lidsk√Ω:

{content}

PO≈ΩADAVKY:
- Zachovej v≈°echny d≈Øle≈æit√© informace a fakta
- Zlep≈°i flow a ƒçitelnost textu
- P≈ôidej p≈ôirozen√© p≈ôechody mezi odstavci
- Pou≈æij variantnƒõj≈°√≠ slovn√≠k a formulace
- Odstra≈à p≈ô√≠li≈° form√°ln√≠ nebo robotick√Ω jazyk
- Zachovej HTML strukturu a tagy
- P≈ôidej v√≠ce osobnosti a t√≥nu hlasu
- Udƒõlej text poutavƒõj≈°√≠ pro ƒçten√°≈ôe

Vra≈• pouze upraven√Ω text bez dodateƒçn√Ωch koment√°≈ô≈Ø.
    """
    
    try:
        # Inicializace OpenAI client
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            logger.error("‚ùå OpenAI API kl√≠ƒç nen√≠ dostupn√Ω")
            raise Exception("HumanizerAssistant: OpenAI API kl√≠ƒç nen√≠ dostupn√Ω")
            
        client = OpenAI(api_key=api_key)
        
        # Sestaven√≠ zpr√°v pro OpenAI
        messages = [
            {"role": "system", "content": default_params["system_prompt"]},
            {"role": "user", "content": humanization_prompt}
        ]
        
        # Vol√°n√≠ OpenAI API
        logger.info(f"ü§ñ Vol√°m OpenAI API s modelem {default_params['model']}")
        response = client.chat.completions.create(
            model=default_params["model"],
            messages=messages,
            temperature=default_params["temperature"],
            top_p=default_params["top_p"],
            max_tokens=default_params["max_tokens"]
        )
        
        humanized_content = response.choices[0].message.content.strip()
        logger.info(f"‚úÖ OpenAI API √∫spƒõ≈°nƒõ humanizovalo content: {len(humanized_content)} znak≈Ø")
        
        # üîß FIX: Workflow oƒçek√°v√° form√°t s "output" kl√≠ƒçem
        return {"output": humanized_content}
            
    except Exception as e:
        logger.error(f"‚ùå Humanization selhala: {e}")
        raise Exception(f"HumanizerAssistant selhal: {e}")



# Synchronn√≠ wrapper pro zpƒõtnou kompatibilitu
def humanizer_assistant_sync(content: str, assistant_id: Optional[str] = None) -> Dict[str, Any]:
    """Synchronn√≠ verze pro testov√°n√≠"""
    import asyncio
    return asyncio.run(humanizer_assistant(content, assistant_id))