# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class ProjectActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Project]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Project.prisma().query_raw(
            'SELECT * FROM Project WHERE id = ?',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Project
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Project.prisma().query_first(
            'SELECT * FROM Project WHERE name = ?',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ProjectCreateInput,
        include: Optional[types.ProjectInclude] = None
    ) -> _PrismaModelT:
        """Create a new Project record.

        Parameters
        ----------
        data
            Project record data
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The created Project record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Project record from just the required fields
        project = await Project.prisma().create(
            data={
                # data to create a Project record
                'name': 'ggciceaie',
                'slug': 'bbehjachib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ProjectCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Project records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Project record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Project.prisma().create_many(
            data=[
                {
                    # data to create a Project record
                    'name': 'cadfabfehe',
                    'slug': 'dgiiaaijj',
                },
                {
                    # data to create a Project record
                    'name': 'bfaiacjjfc',
                    'slug': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Project record.

        Parameters
        ----------
        where
            Project filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The deleted Project record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().delete(
            where={
                'id': 'bagcfbhiig',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Project record.

        Parameters
        ----------
        where
            Project filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The found Project record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().find_unique(
            where={
                'id': 'cghideieh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Project record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Project filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The found Project record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().find_unique_or_raise(
            where={
                'id': 'biabhbdai',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
        include: Optional[types.ProjectInclude] = None,
        order: Optional[Union[types.ProjectOrderByInput, List[types.ProjectOrderByInput]]] = None,
        distinct: Optional[List[types.ProjectScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Project records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Project records returned
        skip
            Ignore the first N results
        where
            Project filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Project model
        order
            Order the returned Project records by any field
        distinct
            Filter Project records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Project]
            The list of all Project records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Project records
        projects = await Project.prisma().find_many(take=10)

        # find the first 5 Project records ordered by the slug field
        projects = await Project.prisma().find_many(
            take=5,
            order={
                'slug': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
        include: Optional[types.ProjectInclude] = None,
        order: Optional[Union[types.ProjectOrderByInput, List[types.ProjectOrderByInput]]] = None,
        distinct: Optional[List[types.ProjectScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Project record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Project filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Project model
        order
            Order the returned Project records by any field
        distinct
            Filter Project records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Project
            The first Project record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Project record ordered by the language field
        project = await Project.prisma().find_first(
            skip=1,
            order={
                'language': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
        include: Optional[types.ProjectInclude] = None,
        order: Optional[Union[types.ProjectOrderByInput, List[types.ProjectOrderByInput]]] = None,
        distinct: Optional[List[types.ProjectScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Project record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Project filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Project model
        order
            Order the returned Project records by any field
        distinct
            Filter Project records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Project
            The first Project record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Project record ordered by the description field
        project = await Project.prisma().find_first_or_raise(
            skip=1,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ProjectUpdateInput,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Project record.

        Parameters
        ----------
        data
            Project record data specifying what to update
        where
            Project filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The updated Project record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        project = await Project.prisma().update(
            where={
                'id': 'idghgaicb',
            },
            data={
                # data to update the Project record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ProjectWhereUniqueInput,
        data: types.ProjectUpsertInput,
        include: Optional[types.ProjectInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Project filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The created or updated Project record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().upsert(
            where={
                'id': 'fjfddhigg',
            },
            data={
                'create': {
                    'id': 'fjfddhigg',
                    'name': 'bfaiacjjfc',
                    'slug': 'eigcfgbif',
                },
                'update': {
                    'name': 'bfaiacjjfc',
                    'slug': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ProjectUpdateManyMutationInput,
        where: types.ProjectWhereInput,
    ) -> int:
        """Update multiple Project records

        Parameters
        ----------
        data
            Project data to update the selected Project records to
        where
            Filter to select the Project records to update

        Returns
        -------
        int
            The total number of Project records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Project records
        total = await Project.prisma().update_many(
            data={
                'createdAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Project records present in the database

        Parameters
        ----------
        select
            Select the Project fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Project filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProjectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Project.prisma().count()

        # results: prisma.types.ProjectCountAggregateOutput
        results = await Project.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ProjectCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
    ) -> types.ProjectCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ProjectCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
    ) -> Union[int, types.ProjectCountAggregateOutput]:
        """Count the number of Project records present in the database

        Parameters
        ----------
        select
            Select the Project fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Project filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProjectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Project.prisma().count()

        # results: prisma.types.ProjectCountAggregateOutput
        results = await Project.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ProjectCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ProjectWhereInput] = None
    ) -> int:
        """Delete multiple Project records.

        Parameters
        ----------
        where
            Optional Project filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Project records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Project records
        total = await Project.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ProjectScalarFieldKeys'],
        *,
        where: Optional['types.ProjectWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ProjectAvgAggregateInput'] = None,
        sum: Optional['types.ProjectSumAggregateInput'] = None,
        min: Optional['types.ProjectMinAggregateInput'] = None,
        max: Optional['types.ProjectMaxAggregateInput'] = None,
        having: Optional['types.ProjectScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ProjectCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ProjectScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ProjectScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ProjectGroupByOutput']:
        """Group Project records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Project fields to group records by
        where
            Project filter to select records
        take
            Limit the maximum number of Project records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ProjectGroupByOutput]
            A list of dictionaries representing the Project record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Project records by name values
        # and count how many records are in each group
        results = await Project.prisma().group_by(
            ['name'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AssistantActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Assistant]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Assistant.prisma().query_raw(
            'SELECT * FROM Assistant WHERE id = ?',
            'hjaecfifb',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Assistant
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Assistant.prisma().query_first(
            'SELECT * FROM Assistant WHERE projectId = ?',
            'cbbbjbfcii',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.AssistantCreateInput,
        include: Optional[types.AssistantInclude] = None
    ) -> _PrismaModelT:
        """Create a new Assistant record.

        Parameters
        ----------
        data
            Assistant record data
        include
            Specifies which relations should be loaded on the returned Assistant model

        Returns
        -------
        prisma.models.Assistant
            The created Assistant record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Assistant record from just the required fields
        assistant = await Assistant.prisma().create(
            data={
                # data to create a Assistant record
                'projectId': 'bbejhfidcb',
                'name': 'bgeecijdgg',
                'functionKey': 'bdiicjafbj',
                'order': 1647418052,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.AssistantCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Assistant records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Assistant record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Assistant.prisma().create_many(
            data=[
                {
                    # data to create a Assistant record
                    'projectId': 'bghffegacj',
                    'name': 'bhghchehcc',
                    'functionKey': 'dcgchcbbf',
                    'order': 1343201072,
                },
                {
                    # data to create a Assistant record
                    'projectId': 'ghfhiafcb',
                    'name': 'heejgedji',
                    'functionKey': 'bjgjgibgbf',
                    'order': 1116175964,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AssistantWhereUniqueInput,
        include: Optional[types.AssistantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Assistant record.

        Parameters
        ----------
        where
            Assistant filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Assistant model

        Returns
        -------
        prisma.models.Assistant
            The deleted Assistant record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assistant = await Assistant.prisma().delete(
            where={
                'id': 'igbehcbab',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.AssistantWhereUniqueInput,
        include: Optional[types.AssistantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Assistant record.

        Parameters
        ----------
        where
            Assistant filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Assistant model

        Returns
        -------
        prisma.models.Assistant
            The found Assistant record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assistant = await Assistant.prisma().find_unique(
            where={
                'id': 'bdadaadhag',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.AssistantWhereUniqueInput,
        include: Optional[types.AssistantInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Assistant record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Assistant filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Assistant model

        Returns
        -------
        prisma.models.Assistant
            The found Assistant record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assistant = await Assistant.prisma().find_unique_or_raise(
            where={
                'id': 'bgiggdidbf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssistantWhereInput] = None,
        cursor: Optional[types.AssistantWhereUniqueInput] = None,
        include: Optional[types.AssistantInclude] = None,
        order: Optional[Union[types.AssistantOrderByInput, List[types.AssistantOrderByInput]]] = None,
        distinct: Optional[List[types.AssistantScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Assistant records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Assistant records returned
        skip
            Ignore the first N results
        where
            Assistant filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Assistant model
        order
            Order the returned Assistant records by any field
        distinct
            Filter Assistant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Assistant]
            The list of all Assistant records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Assistant records
        assistants = await Assistant.prisma().find_many(take=10)

        # find the first 5 Assistant records ordered by the name field
        assistants = await Assistant.prisma().find_many(
            take=5,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AssistantWhereInput] = None,
        cursor: Optional[types.AssistantWhereUniqueInput] = None,
        include: Optional[types.AssistantInclude] = None,
        order: Optional[Union[types.AssistantOrderByInput, List[types.AssistantOrderByInput]]] = None,
        distinct: Optional[List[types.AssistantScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Assistant record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Assistant filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Assistant model
        order
            Order the returned Assistant records by any field
        distinct
            Filter Assistant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Assistant
            The first Assistant record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Assistant record ordered by the functionKey field
        assistant = await Assistant.prisma().find_first(
            skip=1,
            order={
                'functionKey': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AssistantWhereInput] = None,
        cursor: Optional[types.AssistantWhereUniqueInput] = None,
        include: Optional[types.AssistantInclude] = None,
        order: Optional[Union[types.AssistantOrderByInput, List[types.AssistantOrderByInput]]] = None,
        distinct: Optional[List[types.AssistantScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Assistant record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Assistant filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Assistant model
        order
            Order the returned Assistant records by any field
        distinct
            Filter Assistant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Assistant
            The first Assistant record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Assistant record ordered by the inputType field
        assistant = await Assistant.prisma().find_first_or_raise(
            skip=1,
            order={
                'inputType': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.AssistantUpdateInput,
        where: types.AssistantWhereUniqueInput,
        include: Optional[types.AssistantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Assistant record.

        Parameters
        ----------
        data
            Assistant record data specifying what to update
        where
            Assistant filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Assistant model

        Returns
        -------
        prisma.models.Assistant
            The updated Assistant record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        assistant = await Assistant.prisma().update(
            where={
                'id': 'caaaedabfc',
            },
            data={
                # data to update the Assistant record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.AssistantWhereUniqueInput,
        data: types.AssistantUpsertInput,
        include: Optional[types.AssistantInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Assistant filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Assistant model

        Returns
        -------
        prisma.models.Assistant
            The created or updated Assistant record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assistant = await Assistant.prisma().upsert(
            where={
                'id': 'bigibebcib',
            },
            data={
                'create': {
                    'id': 'bigibebcib',
                    'projectId': 'ghfhiafcb',
                    'name': 'heejgedji',
                    'functionKey': 'bjgjgibgbf',
                    'order': 1116175964,
                },
                'update': {
                    'projectId': 'ghfhiafcb',
                    'name': 'heejgedji',
                    'functionKey': 'bjgjgibgbf',
                    'order': 1116175964,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.AssistantUpdateManyMutationInput,
        where: types.AssistantWhereInput,
    ) -> int:
        """Update multiple Assistant records

        Parameters
        ----------
        data
            Assistant data to update the selected Assistant records to
        where
            Filter to select the Assistant records to update

        Returns
        -------
        int
            The total number of Assistant records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Assistant records
        total = await Assistant.prisma().update_many(
            data={
                'outputType': 'bigaiehgcc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssistantWhereInput] = None,
        cursor: Optional[types.AssistantWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Assistant records present in the database

        Parameters
        ----------
        select
            Select the Assistant fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Assistant filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AssistantCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Assistant.prisma().count()

        # results: prisma.types.AssistantCountAggregateOutput
        results = await Assistant.prisma().count(
            select={
                '_all': True,
                'order': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.AssistantCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssistantWhereInput] = None,
        cursor: Optional[types.AssistantWhereUniqueInput] = None,
    ) -> types.AssistantCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.AssistantCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssistantWhereInput] = None,
        cursor: Optional[types.AssistantWhereUniqueInput] = None,
    ) -> Union[int, types.AssistantCountAggregateOutput]:
        """Count the number of Assistant records present in the database

        Parameters
        ----------
        select
            Select the Assistant fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Assistant filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AssistantCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Assistant.prisma().count()

        # results: prisma.types.AssistantCountAggregateOutput
        results = await Assistant.prisma().count(
            select={
                '_all': True,
                'timeout': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AssistantCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.AssistantWhereInput] = None
    ) -> int:
        """Delete multiple Assistant records.

        Parameters
        ----------
        where
            Optional Assistant filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Assistant records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Assistant records
        total = await Assistant.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.AssistantScalarFieldKeys'],
        *,
        where: Optional['types.AssistantWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AssistantAvgAggregateInput'] = None,
        sum: Optional['types.AssistantSumAggregateInput'] = None,
        min: Optional['types.AssistantMinAggregateInput'] = None,
        max: Optional['types.AssistantMaxAggregateInput'] = None,
        having: Optional['types.AssistantScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AssistantCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AssistantScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.AssistantScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.AssistantGroupByOutput']:
        """Group Assistant records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Assistant fields to group records by
        where
            Assistant filter to select records
        take
            Limit the maximum number of Assistant records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AssistantGroupByOutput]
            A list of dictionaries representing the Assistant record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Assistant records by heartbeat values
        # and count how many records are in each group
        results = await Assistant.prisma().group_by(
            ['heartbeat'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class WorkflowRunActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.WorkflowRun]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await WorkflowRun.prisma().query_raw(
            'SELECT * FROM WorkflowRun WHERE id = ?',
            'beeifcbebf',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.WorkflowRun
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await WorkflowRun.prisma().query_first(
            'SELECT * FROM WorkflowRun WHERE projectId = ?',
            'bgcigfahea',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.WorkflowRunCreateInput,
        include: Optional[types.WorkflowRunInclude] = None
    ) -> _PrismaModelT:
        """Create a new WorkflowRun record.

        Parameters
        ----------
        data
            WorkflowRun record data
        include
            Specifies which relations should be loaded on the returned WorkflowRun model

        Returns
        -------
        prisma.models.WorkflowRun
            The created WorkflowRun record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a WorkflowRun record from just the required fields
        workflowrun = await WorkflowRun.prisma().create(
            data={
                # data to create a WorkflowRun record
                'projectId': 'bcejgaggif',
                'runId': 'idfjadbcc',
                'workflowId': 'hgdhbjhhj',
                'topic': 'ecjjjfbae',
                'status': 'bhhfibbigf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.WorkflowRunCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple WorkflowRun records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of WorkflowRun record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await WorkflowRun.prisma().create_many(
            data=[
                {
                    # data to create a WorkflowRun record
                    'projectId': 'ijdbeffgg',
                    'runId': 'jjfeafhfj',
                    'workflowId': 'cbachdgfce',
                    'topic': 'chbfcacbd',
                    'status': 'efggddide',
                },
                {
                    # data to create a WorkflowRun record
                    'projectId': 'caficfigfb',
                    'runId': 'bfidgijfjc',
                    'workflowId': 'ihieecagf',
                    'topic': 'bghfciaafe',
                    'status': 'bgchfhgceh',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.WorkflowRunWhereUniqueInput,
        include: Optional[types.WorkflowRunInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single WorkflowRun record.

        Parameters
        ----------
        where
            WorkflowRun filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned WorkflowRun model

        Returns
        -------
        prisma.models.WorkflowRun
            The deleted WorkflowRun record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        workflowrun = await WorkflowRun.prisma().delete(
            where={
                'id': 'cafeiaccbc',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.WorkflowRunWhereUniqueInput,
        include: Optional[types.WorkflowRunInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique WorkflowRun record.

        Parameters
        ----------
        where
            WorkflowRun filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned WorkflowRun model

        Returns
        -------
        prisma.models.WorkflowRun
            The found WorkflowRun record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        workflowrun = await WorkflowRun.prisma().find_unique(
            where={
                'id': 'gaddfhfh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.WorkflowRunWhereUniqueInput,
        include: Optional[types.WorkflowRunInclude] = None
    ) -> _PrismaModelT:
        """Find a unique WorkflowRun record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            WorkflowRun filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned WorkflowRun model

        Returns
        -------
        prisma.models.WorkflowRun
            The found WorkflowRun record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        workflowrun = await WorkflowRun.prisma().find_unique_or_raise(
            where={
                'id': 'gieegcbeg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.WorkflowRunWhereInput] = None,
        cursor: Optional[types.WorkflowRunWhereUniqueInput] = None,
        include: Optional[types.WorkflowRunInclude] = None,
        order: Optional[Union[types.WorkflowRunOrderByInput, List[types.WorkflowRunOrderByInput]]] = None,
        distinct: Optional[List[types.WorkflowRunScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple WorkflowRun records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of WorkflowRun records returned
        skip
            Ignore the first N results
        where
            WorkflowRun filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned WorkflowRun model
        order
            Order the returned WorkflowRun records by any field
        distinct
            Filter WorkflowRun records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.WorkflowRun]
            The list of all WorkflowRun records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 WorkflowRun records
        workflowruns = await WorkflowRun.prisma().find_many(take=10)

        # find the first 5 WorkflowRun records ordered by the runId field
        workflowruns = await WorkflowRun.prisma().find_many(
            take=5,
            order={
                'runId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.WorkflowRunWhereInput] = None,
        cursor: Optional[types.WorkflowRunWhereUniqueInput] = None,
        include: Optional[types.WorkflowRunInclude] = None,
        order: Optional[Union[types.WorkflowRunOrderByInput, List[types.WorkflowRunOrderByInput]]] = None,
        distinct: Optional[List[types.WorkflowRunScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single WorkflowRun record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            WorkflowRun filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned WorkflowRun model
        order
            Order the returned WorkflowRun records by any field
        distinct
            Filter WorkflowRun records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.WorkflowRun
            The first WorkflowRun record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second WorkflowRun record ordered by the workflowId field
        workflowrun = await WorkflowRun.prisma().find_first(
            skip=1,
            order={
                'workflowId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.WorkflowRunWhereInput] = None,
        cursor: Optional[types.WorkflowRunWhereUniqueInput] = None,
        include: Optional[types.WorkflowRunInclude] = None,
        order: Optional[Union[types.WorkflowRunOrderByInput, List[types.WorkflowRunOrderByInput]]] = None,
        distinct: Optional[List[types.WorkflowRunScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single WorkflowRun record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            WorkflowRun filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned WorkflowRun model
        order
            Order the returned WorkflowRun records by any field
        distinct
            Filter WorkflowRun records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.WorkflowRun
            The first WorkflowRun record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second WorkflowRun record ordered by the topic field
        workflowrun = await WorkflowRun.prisma().find_first_or_raise(
            skip=1,
            order={
                'topic': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.WorkflowRunUpdateInput,
        where: types.WorkflowRunWhereUniqueInput,
        include: Optional[types.WorkflowRunInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single WorkflowRun record.

        Parameters
        ----------
        data
            WorkflowRun record data specifying what to update
        where
            WorkflowRun filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned WorkflowRun model

        Returns
        -------
        prisma.models.WorkflowRun
            The updated WorkflowRun record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        workflowrun = await WorkflowRun.prisma().update(
            where={
                'id': 'bgcffadich',
            },
            data={
                # data to update the WorkflowRun record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.WorkflowRunWhereUniqueInput,
        data: types.WorkflowRunUpsertInput,
        include: Optional[types.WorkflowRunInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            WorkflowRun filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned WorkflowRun model

        Returns
        -------
        prisma.models.WorkflowRun
            The created or updated WorkflowRun record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        workflowrun = await WorkflowRun.prisma().upsert(
            where={
                'id': 'fcbichhci',
            },
            data={
                'create': {
                    'id': 'fcbichhci',
                    'projectId': 'caficfigfb',
                    'runId': 'bfidgijfjc',
                    'workflowId': 'ihieecagf',
                    'topic': 'bghfciaafe',
                    'status': 'bgchfhgceh',
                },
                'update': {
                    'projectId': 'caficfigfb',
                    'runId': 'bfidgijfjc',
                    'workflowId': 'ihieecagf',
                    'topic': 'bghfciaafe',
                    'status': 'bgchfhgceh',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.WorkflowRunUpdateManyMutationInput,
        where: types.WorkflowRunWhereInput,
    ) -> int:
        """Update multiple WorkflowRun records

        Parameters
        ----------
        data
            WorkflowRun data to update the selected WorkflowRun records to
        where
            Filter to select the WorkflowRun records to update

        Returns
        -------
        int
            The total number of WorkflowRun records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all WorkflowRun records
        total = await WorkflowRun.prisma().update_many(
            data={
                'status': 'bcggadccgf'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.WorkflowRunWhereInput] = None,
        cursor: Optional[types.WorkflowRunWhereUniqueInput] = None,
    ) -> int:
        """Count the number of WorkflowRun records present in the database

        Parameters
        ----------
        select
            Select the WorkflowRun fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            WorkflowRun filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.WorkflowRunCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await WorkflowRun.prisma().count()

        # results: prisma.types.WorkflowRunCountAggregateOutput
        results = await WorkflowRun.prisma().count(
            select={
                '_all': True,
                'startedAt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.WorkflowRunCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.WorkflowRunWhereInput] = None,
        cursor: Optional[types.WorkflowRunWhereUniqueInput] = None,
    ) -> types.WorkflowRunCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.WorkflowRunCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.WorkflowRunWhereInput] = None,
        cursor: Optional[types.WorkflowRunWhereUniqueInput] = None,
    ) -> Union[int, types.WorkflowRunCountAggregateOutput]:
        """Count the number of WorkflowRun records present in the database

        Parameters
        ----------
        select
            Select the WorkflowRun fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            WorkflowRun filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.WorkflowRunCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await WorkflowRun.prisma().count()

        # results: prisma.types.WorkflowRunCountAggregateOutput
        results = await WorkflowRun.prisma().count(
            select={
                '_all': True,
                'finishedAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.WorkflowRunCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.WorkflowRunWhereInput] = None
    ) -> int:
        """Delete multiple WorkflowRun records.

        Parameters
        ----------
        where
            Optional WorkflowRun filter to find the records to be deleted

        Returns
        -------
        int
            The total number of WorkflowRun records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all WorkflowRun records
        total = await WorkflowRun.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.WorkflowRunScalarFieldKeys'],
        *,
        where: Optional['types.WorkflowRunWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.WorkflowRunAvgAggregateInput'] = None,
        sum: Optional['types.WorkflowRunSumAggregateInput'] = None,
        min: Optional['types.WorkflowRunMinAggregateInput'] = None,
        max: Optional['types.WorkflowRunMaxAggregateInput'] = None,
        having: Optional['types.WorkflowRunScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.WorkflowRunCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.WorkflowRunScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.WorkflowRunScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.WorkflowRunGroupByOutput']:
        """Group WorkflowRun records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar WorkflowRun fields to group records by
        where
            WorkflowRun filter to select records
        take
            Limit the maximum number of WorkflowRun records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.WorkflowRunGroupByOutput]
            A list of dictionaries representing the WorkflowRun record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group WorkflowRun records by outputPath values
        # and count how many records are in each group
        results = await WorkflowRun.prisma().group_by(
            ['outputPath'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models