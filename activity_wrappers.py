"""
üõ°Ô∏è BEZPEƒåN√â WRAPPERY PRO TEMPORAL AKTIVITY
Zabezpeƒçuje v≈°echny aktivity proti neoƒçek√°van√Ωm p√°dom.
"""

import functools
import time
from typing import Any, Dict, Callable, Optional
from temporalio import activity
from logger import get_logger, log_activity_start, log_activity_success, log_activity_error

logger = get_logger(__name__)

def safe_activity(
    name: Optional[str] = None,
    timeout_seconds: int = 600,
    heartbeat_interval: int = 60
):
    """
    Decorator pro bezpeƒçn√© Temporal aktivity.
    
    Args:
        name: N√°zev aktivity (pokud nen√≠ poskytnut, pou≈æije se n√°zev funkce)
        timeout_seconds: Timeout v sekund√°ch
        heartbeat_interval: Interval heartbeat v sekund√°ch
    """
    def decorator(func: Callable) -> Callable:
        activity_name = name or func.__name__
        
        @activity.defn(name=activity_name)
        @functools.wraps(func)
        async def wrapper(*args, **kwargs) -> Dict[str, Any]:
            """Bezpeƒçn√Ω wrapper pro aktivitu."""
            start_time = time.time()
            
            # P≈ô√≠prava vstupn√≠ch dat pro logov√°n√≠
            inputs = {
                "args": args,
                "kwargs": kwargs
            }
            
            try:
                # Logov√°n√≠ zaƒç√°tku
                log_activity_start(logger, activity_name, inputs)
                
                # Heartbeat p≈ôed spu≈°tƒõn√≠m
                activity.heartbeat()
                
                # Spu≈°tƒõn√≠ aktivity (odstranil jsem problematickou kontrolu cancel stavu)
                result = await func(*args, **kwargs)
                
                # Kontrola v√Ωsledku
                if result is None:
                    logger.warning(f"‚ö†Ô∏è Activity {activity_name} vr√°tila None")
                    result = {"status": "completed", "output": "", "warning": "Empty result"}
                elif isinstance(result, str):
                    # P≈ôevod stringu na standardn√≠ form√°t
                    result = {"status": "completed", "output": result}
                elif not isinstance(result, dict):
                    # P≈ôevod ostatn√≠ch typ≈Ø na standardn√≠ form√°t
                    result = {"status": "completed", "output": str(result)}
                
                # Zaji≈°tƒõn√≠ status pole
                if "status" not in result:
                    result["status"] = "completed"
                
                # Logov√°n√≠ √∫spƒõchu
                duration = time.time() - start_time
                output_preview = str(result.get("output", ""))[:200]
                log_activity_success(logger, activity_name, output_preview)
                logger.info(f"   ‚è±Ô∏è Duration: {duration:.2f}s")
                
                return result
                
            except Exception as e:
                # Logov√°n√≠ chyby
                duration = time.time() - start_time
                log_activity_error(logger, activity_name, e, inputs)
                logger.error(f"   ‚è±Ô∏è Failed after: {duration:.2f}s")
                
                # Standardizovan√Ω error response
                error_result = {
                    "status": "error",
                    "error": str(e),
                    "error_type": type(e).__name__,
                    "duration": duration,
                    "activity": activity_name
                }
                
                # Pro kritick√© chyby propagujeme v√Ωjimku
                if isinstance(e, (KeyboardInterrupt, SystemExit)):
                    raise
                
                # Pro ostatn√≠ chyby vrac√≠me error response
                return error_result
        
        return wrapper
    return decorator

def validate_activity_input(inputs: Dict[str, Any], required_fields: list) -> None:
    """
    Validuje vstupn√≠ data aktivity.
    
    Args:
        inputs: Vstupn√≠ data
        required_fields: Seznam povinn√Ωch pol√≠
        
    Raises:
        ValueError: Pokud chyb√≠ povinn√° pole
    """
    missing_fields = [field for field in required_fields if field not in inputs]
    if missing_fields:
        raise ValueError(f"Chyb√≠ povinn√° pole: {missing_fields}")

def standardize_activity_output(output: Any, activity_name: str) -> Dict[str, Any]:
    """
    Standardizuje v√Ωstup aktivity do jednotn√©ho form√°tu.
    
    Args:
        output: Surov√Ω v√Ωstup aktivity
        activity_name: N√°zev aktivity
        
    Returns:
        Standardizovan√Ω v√Ωstup
    """
    if isinstance(output, dict) and "status" in output:
        return output
    
    return {
        "status": "completed",
        "output": output,
        "activity": activity_name,
        "timestamp": time.time()
    }

async def safe_llm_call(
    llm_func: Callable,
    provider: str,
    model: str,
    max_retries: int = 3,
    **kwargs
) -> Dict[str, Any]:
    """
    Bezpeƒçn√© vol√°n√≠ LLM s retry logikou.
    
    Args:
        llm_func: LLM funkce k vol√°n√≠
        provider: LLM provider (openai, claude, gemini)
        model: Model name
        max_retries: Maxim√°ln√≠ poƒçet pokus≈Ø
        **kwargs: Argumenty pro LLM funkci
        
    Returns:
        Standardizovan√Ω LLM response
    """
    last_error = None
    
    for attempt in range(max_retries):
        try:
            # Heartbeat p≈ôed ka≈æd√Ωm pokusem
            activity.heartbeat()
            
            logger.info(f"ü§ñ LLM pokus {attempt + 1}/{max_retries}: {provider}/{model}")
            
            # Rozpozn√°n√≠ typu LLM funkce podle n√°zvu
            func_name = getattr(llm_func, '__name__', str(llm_func))
            func_str = str(llm_func)
            logger.info(f"üîç FUNC DEBUG: func_name='{func_name}', func_str='{func_str}'")
            
            if 'image_generation' in func_name or 'image_generation' in func_str:
                # Pro image generation API - pou≈æ√≠v√°me prompt + model parametr
                prompt = kwargs.get('prompt', kwargs.get('user_message', ''))
                size = kwargs.get('size', '1024x1024')
                quality = kwargs.get('quality', 'standard')
                style = kwargs.get('style', 'vivid')
                logger.info(f"üé® IMAGE GENERATION: provider={provider}, model={model}, prompt={prompt[:100]}...")
                result = await llm_func(prompt=prompt, model=model, size=size, quality=quality, style=style)
            else:
                # Pro chat completion API - KONVERZE NA STRING!!
                system_prompt = kwargs.get('system_prompt', '')
                user_message = kwargs.get('user_message', '')
                
                # üîß KRITICK√Å OPRAVA: V≈ΩDY P≈òEV√âST user_message NA STRING!
                if not isinstance(user_message, str):
                    logger.warning(f"‚ö†Ô∏è user_message nen√≠ string: {type(user_message)}, p≈ôev√°d√≠m na string")
                    user_message = str(user_message)
                
                temperature = kwargs.get('temperature', 0.7)
                max_tokens = kwargs.get('max_tokens')
                
                logger.info(f"üîç LLM_CALL DEBUG: user_message type={type(user_message)}, len={len(user_message)}")
                
                result = await llm_func(
                    system_prompt=system_prompt,
                    user_message=user_message, 
                    model=model,
                    temperature=temperature,
                    max_tokens=max_tokens
                )
            
            # Kontrola v√Ωsledku podle typu API
            if result:
                if 'image_generation' in func_name or 'image_generation' in func_str:
                    # Pro image generation oƒçek√°v√°me "content" kl√≠ƒç
                    if "content" in result:
                        logger.info(f"‚úÖ LLM √∫spƒõch: {provider}/{model}")
                        return result
                    else:
                        raise Exception(f"Image generation vr√°til nevalidn√≠ response (missing 'content'): {result}")
                elif "content" in result:
                    # Pro chat completion oƒçek√°v√°me "content" kl√≠ƒç
                    logger.info(f"‚úÖ LLM √∫spƒõch: {provider}/{model}")
                    return result
                else:
                    raise Exception(f"Chat completion vr√°til nevalidn√≠ response (missing 'content'): {result}")
            else:
                raise Exception(f"LLM vr√°til pr√°zdn√Ω response: {result}")
                
        except Exception as e:
            last_error = e
            logger.warning(f"‚ö†Ô∏è LLM pokus {attempt + 1} selhal: {str(e)}")
            
            if attempt < max_retries - 1:
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
    
    # V≈°echny pokusy selhaly
    raise Exception(f"LLM selhalo po {max_retries} pokusech. Posledn√≠ chyba: {last_error}")

# Import asyncio pro safe_llm_call
import asyncio