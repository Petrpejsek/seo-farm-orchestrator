#!/usr/bin/env python3
"""
üè≠ SEO ORCHESTRATOR - PRODUKƒåN√ç WORKER
Stabiln√≠, crash-proof worker pro Temporal.io orchestraci LLM ƒçl√°nk≈Ø.

Spu≈°tƒõn√≠:
    export API_BASE_URL=http://localhost:8000
    python worker.py

Monitoring:
    tail -f worker_production.log

Dokumentace:
    Viz PRODUCTION_README.md
"""

import sys
import os
import asyncio
import signal
from pathlib import Path

# P≈ôid√°n√≠ project root do Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Import produkƒçn√≠ho workera
from production_worker import main as production_main

def check_environment():
    """Kontrola z√°kladn√≠ch po≈æadavk≈Ø p≈ôed spu≈°tƒõn√≠m."""
    print("üîç === P≈òEDSTARTOVN√ç KONTROLA ===")
    
    # Kontrola API_BASE_URL
    api_url = os.getenv("API_BASE_URL")
    if not api_url:
        print("‚ùå CHYBA: Environment variable API_BASE_URL nen√≠ nastavena")
        print("   ≈òe≈°en√≠: export API_BASE_URL=http://localhost:8000")
        return False
    
    print(f"‚úÖ API_BASE_URL: {api_url}")
    
    # Kontrola Python verze
    if sys.version_info < (3, 8):
        print(f"‚ùå CHYBA: Python {sys.version_info.major}.{sys.version_info.minor} nen√≠ podporov√°n")
        print("   Minim√°ln√≠ verze: Python 3.8+")
        return False
    
    print(f"‚úÖ Python verze: {sys.version_info.major}.{sys.version_info.minor}")
    
    # Kontrola d≈Øle≈æit√Ωch modul≈Ø
    required_modules = [
        ("temporalio", "Temporal.io client"),
        ("prisma", "Database ORM"),
        ("httpx", "HTTP client")
    ]
    
    for module, description in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {description}: OK")
        except ImportError:
            print(f"‚ùå CHYBA: {description} nen√≠ nainstalov√°n")
            print(f"   ≈òe≈°en√≠: pip install {module}")
            return False
    
    print("üéâ P≈ôedstartovn√≠ kontrola √∫spƒõ≈°n√°!")
    print()
    return True

def setup_signal_handlers():
    """Nastav√≠ signal handlers pro graceful shutdown."""
    def signal_handler(signum, frame):
        print(f"\nüì° P≈ôijat signal {signum} - ukonƒçuji worker...")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # systemd stop

if __name__ == "__main__":
    print("üè≠ === SEO ORCHESTRATOR WORKER ===")
    print("üìã Produkƒçn√≠ worker pro stabiln√≠ LLM orchestraci")
    print()
    
    # P≈ôedstartovn√≠ kontrola
    if not check_environment():
        print("üí• Worker se nespust√≠ kv≈Øli chyb√°m v konfiguraci")
        sys.exit(1)
    
    # Signal handlers
    setup_signal_handlers()
    
    try:
        print("üöÄ Spou≈°t√≠m produkƒçn√≠ worker...")
        print("   üìä Monitoring: tail -f worker_production.log")
        print("   ‚èπÔ∏è Stop: Ctrl+C nebo kill -TERM")
        print()
        
        # Spu≈°tƒõn√≠ hlavn√≠ho workera
        asyncio.run(production_main())
        
    except KeyboardInterrupt:
        print("\n‚ö° Worker p≈ôeru≈°en u≈æivatelem")
    except Exception as e:
        print(f"\nüíÄ Kritick√° chyba: {e}")
        sys.exit(1)
    finally:
        print("üëã Worker ukonƒçen")